=head1 NAME

Apache::Request - Methods for dealing with client request data

=head1 SYNOPSIS

    use Apache::Request;
    my $req = Apache::Request->new($r);

=head1 DESCRIPTION

C<Apache::Request> adds methods for parsing B<GET> requests and B<POST> 
requests where I<Content-type> is one of I<application/x-www-form-urlencoded>
or I<multipart/form-data>.

=head1 Apache::Request METHODS

The interface is designed to mimic CGI.pm 's routines for parsing
query parameters. The main differences are 

=over 4

=item * C<Apache::Request::new> takes an environment-specific
object as (second) argument.  Newer versions of CGI.pm also accept
this syntax within modperl.

=item * The query parameters are stored as Apache::Table objects,
and are therefore parsed using case-insensitive keys.

=item * The query string is always parsed, even for POST requests.

=back

=head2 new  

creates a new I<Apache::Request> object with an environment object $r:

    my $req = Apache::Request->new($r);

With mod_perl2, the environment object must be an I<Apache::RequestRec>
object.  All methods from the environment class are inherited.

The following attributes are optional:

=over 4

=item POST_MAX, MAX_BODY

Limit the size of POST data (in bytes).

=item DISABLE_UPLOADS [TODO]

Disable file uploads.

=item TEMP_DIR

Sets the directory where upload files are spooled.  On a *nix-like
that supports link(2), the TEMP_DIR should be located on the same
file system as the final destination file:

 my $req = Apache::Request->new($r, TEMP_DIR => "/home/httpd/tmp");
 my $upload = $req->upload('file');
 $upload->link("/home/user/myfile") || warn "link failed: $!";

=item HOOK_DATA [TODO]

Extra configuration info passed to an upload hook.
See the description for the next item, I<UPLOAD_HOOK>.

=item UPLOAD_HOOK (requires Apache::Upload) [TODO]

Sets up a callback to run whenever file upload data is read. This
can be used to provide an upload progress meter during file uploads.
Apache will automatically continue writing the original data to
$upload->fh after the hook exits.

 my $transparent_hook = sub {
   my ($upload, $bb, $hook_data, $next_hook) = @_;
   warn "$hook_data: got $len bytes for " . $upload->name;
 };

 my $apr = Apache::Request->new($r, 
                                HOOK_DATA => "Note",
                                UPLOAD_HOOK => $transparent_hook,
                               );

=back

=head2 instance [DEPRECATED]

The default (and only) behavior of I<Apache::Request> is to intelligently
cache B<POST> data for the duration of the request.  Thus there is no longer
the need for a separate C<instance()> method as existed in I<Apache::Request>
for Apache 1.3 - all B<POST> data is always available from each and every 
I<Apache::Request> object created during the request's lifetime.

However an C<instance()> method is aliased to C<new()> in this release
to ease the pain of porting from 1.X to 2.X.

=head2 param

Get or set (TODO) the request parameters (using case-insensitive keys) by
mimicing the OO interface of C<CGI::param>.  WIth a single

    # similar to CGI.pm

    my $value = $req->param('foo');
    my @values = $req->param('foo');
    my @params = $req->param;

    # the following differ slightly from CGI.pm

    # returns ref to APR::Table object representing all (args + body) params
    my $table = $req->param;

=head2 parms, params [DEPRECATED]

The functionality of these functions is assumed by C<param>,
so they are no longer necessary.  Aliases to C<param> are
provided in this release for backwards compatibility,
however they may be removed from a future release.

=head2 args

Returns an I<Apache::Request::Table> object containing the query-string 
parameters of the I<Apache::Request> object.

   my $args = $req->args;

An optional name parameter can be passed to return the query string
parameter associated with the given name:

   my $arg = $req->args($name);

=head2 body

Returns an I<Apache::Request::Table> object containing the POST data 
parameters of the I<Apache::Request> object.

   my $body = $req->body;

An optional name parameter can be passed to return the POST data
parameter associated with the given name:

   my $param = $req->body($name);


=head2 upload (requires Apache::Upload)

With no arguments, this returns an I<Apache::Upload::Table> object in 
scalar context, or the names of all I<Apache::Upload> objects in
list context.

An optional name parameter can be passed to return the I<Apache::Upload>
object associated with the given name:

    my $upload = $apr->upload($name);

=head1 SUBCLASSING Apache::Request

If the instances of your subclass are hash references then you can actually
inherit from Apache::Request as long as the Apache::Request object is stored in
an attribute called "r" or "_r". (The Apache::Request class effectively does the
delegation for you automagically, as long as it knows where to find the
Apache::Request object to delegate to.)  For example:

	package MySubClass;
	use Apache::Request;
	our @ISA = qw(Apache::Request);
	sub new {
		my($class, @args) = @_;
		return bless { r => Apache::Request->new(@args) }, $class;
	}


=head1 CHANGES in Apache::Request API from 1.X to 2.X

=over 4

=item You must use the two-argument form of $req->args or $req->body to assign 
      parameters to the request.  You may no longer use

        $req->param("foo" => "bar"); # invalid in 2.X

=item C<instance> is now identical to C<new>.

=item C<param> includes the functionality of C<parms> and C<params>.

=item The argument list for the upload hook has changed

=back


=head1 SEE ALSO

Apache::Cookie(3), Apache::Upload(3), APR::Table(3)

=head1 CREDITS

This interface is based on the original pure Perl version by Lincoln Stein.

=head1 MISSING DOCS

$req->config, Apache::Request::Table

