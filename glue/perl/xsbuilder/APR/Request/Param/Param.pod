=head1 NAME

APR::Request::Param - wrapper for libapreq2's param API.


=begin testing
    use APR::Pool;
    use APR::Brigade;
    use APR::Bucket;
    use APR::BucketAlloc;
    use APR::Request;
    use APR::Request::Parser;
    $pool = APR::Pool->new;
    $ba = APR::BucketAlloc->new($pool);
    $bb = APR::Brigade->new($pool, $ba);
    $content = <<EOT;
---XYZ-
Content-Disposition: form-data; name="alpha"
Content-Type: text/plain; charset=us-ascii

first
---XYZ-
Content-Disposition: form-data; name="beta" filename="foo.txt"
Content-Type: text/plain; charset=us-ascii

second
---XYZ-
Content-Disposition: form-data; name="gamma"
Content-Type: text/plain; charset=us-ascii

third
---XYZ---
EOT
    s/(?<!\015)\012/\015\012/g for $content;
    $bb->insert_tail(APR::Bucket->new($ba, $content));
    $parser = APR::Request::Parser->multipart($pool, $ba,
                                    "multipart/form-data; boundary=-XYZ-");
    $req = APR::Request::Custom->handle($pool, "alpha=arg1&beta=arg2",
                                                "foo=bar",
                                                $parser, 1e6, $bb);

=end testing




=head1 SYNOPSIS


=for example begin

  use APR::Request::Param;

  $arg1 = $req->args('alpha');
  $body = $req->body;
  $body->param_class("APR::Request::Param");
  ok $_->isa("APR::Request::Param") for values %$body;

  @uploads = grep {$_->upload} values %$body;


=for example end

=for example_testing
  is $arg1, "arg1", 'alpha arg is "arg1"';
  ok @uploads == 1;




=head1 DESCRIPTION

The C<< APR::Request::Param >> module provides base methods
for interfacing with libapreq2's param API.  It also provides
a few utility functions and constants.




=head1 OVERLOADS

APR::Request::Param




=head2 ""

    "$param"

The double-quote interpolation operator maps to
C<< APR::Request::Param::value() >>.




=head1 METHODS

APR::Request::Param




=head2 name

    $param->name()

Returns the param's name.
This attribute cannot be modified.




=head2 value

    $param->value()

Returns the param's value.
This attribute cannot be modified.




=head2 is_tainted

    $param->is_tainted()
    $param->is_tainted($set)


Get/set the param's internal tainted flag.
Note: if the param's charset is APREQ_CHARSET_UTF8 (8),
this also activates the SvUTF8_on flag during calls
to name() and/or value().



=head2 charset

    $param->charset()
    $param->charset($set)

Get/set the param's internal charset.  The charset
is a number between 0 and 255; the current recognized
values are

=over 4

=item 0 APREQ_CHARSET_ASCII    (7-bit us-ascii)

=item 1 APREQ_CHARSET_LATIN1   (8-bit iso-8859-1)

=item 2 APREQ_CHARSET_CP1252   (8-bit Windows-1252)

=item 8 APREQ_CHARSET_UTF8     (utf8 encoded Unicode)

=back

See L<is_tainted> above for info about how APREQ_CHARSET_UTF8
relates to perl's UTF-8 flag.




=head2 make

    APR::Request::Param->make($pool, $name, $value)

Fast XS param constructor.




=head2 info

    $param->info()
    $param->info($set)

Get/set the APR::Table headers for this param.




=head2 upload

    $param->upload()
    $param->upload($set)

Get/set the APR::Brigade file-upload content for this param.




=head2 upload_filename

    $param->upload_filename()

Returns the client-side filename associated with this param.




=head2 upload_link

    $param->upload_link($path)

Links the file-upload content with the local file named C<< $path >>.
Creates a hard-link if the spoolfile's (see L<upload_tempname>)
temporary directory is on the same device as C<< $path >>;
otherwise this writes a copy.




=head2 upload_slurp

    $param->upload_slurp($data)

Reads the entire file-upload content into C<< $data >>.




=head2 upload_size

    $param->upload_size()

Returns the size of the param's file-upload content.




=head2 upload_type

    $param->upload_type()

Returns the MIME-type of the param's file-upload content.




=head2 upload_tempname

    $param->upload_tempname()

Returns the name of the local spoolfile for this param.




=head2 upload_io

    $param->upload_io()

Returns an L<APR::Request::Brigade::IO> object, which can
be treated as a non-seekable IO stream.




=head2 upload_fh


    $param->upload_fh

Returns a seekable filehandle representing the file-upload content.




=head1 METHODS

APR::Request::Param::Table




=head2 param_class

    $table->param_class()
    $table->param_class($set)


Get/set the class each table element is blessed into during a
L<get> or L<FETCH> call.  If defined, the class must be derived
from APR::Request::Param.  When called with $set, it returns
the $table.  Otherwise it returns the name of the current class,
or undef if no param class is defined.




=head2 get

    $table->get($key)

Same as FETCH.




=head2 FETCH

    $table->FETCH($key)

In scalar context, this returns the first value matching
$key (note: see NEXTKEY for additional notes).  The match
is always case-insensitive.  In list context, this returns
all matching values.  Note: the type of the return values
depends on the table's current param_class.



=head2 EXISTS

Synonym for C<< defined >>; these tables are not
allowed to contain undefined values. Since these
are constant tables, they don't autovivify either.




=head2 NEXTKEY

    $table->NEXTKEY()

Returns the next key in the table.  For perl 5.8+,
if the key is multivalued, a subsequent FETCH on
this key will return the corresponding value, until
either NEXTKEY or FIRSTKEY is invoked again.  For
perl 5.6, FETCH always returns the first value.




=head2 FIRSTKEY

    $table->FIRSTKEY()

Returns the first key in the table.




=head2 do

    $table->do($callback, @keys)

Same as APR::Table::do; iterates over the table
calling $callback->($key, $value) for each matching
@keys.  If @keys is empty, this iterates over the
entire table.

Note: The type of $value inserted into the callback
depends on the table's current value_class.




=head1 METHODS

APR::Request::Brigade

This class is derived from APR::Brigade, providing additional
methods for TIEHANDLE, READ and READLINE.  To be memory efficient,
these methods delete buckets from the brigade as soon as their
data is actually read, so you cannot C<seek> on handles tied to
this class.  Such handles have semantics similar to that of a
read-only socket.




=head2 new, TIEHANDLE

    APR::Request::Brigade->TIEHANDLE($bb)

Creates a copy of the bucket brigade represented by $bb, and
blesses that copy into the APR::Request::Brigade class.  This
provides syntactic sugar for using perl's builtin C<read>, C<readline>,
and C<< <> >> operations on handles tied to this package:

    use Symbol;
    $fh = gensym;
    tie *$fh, "APR::Request:Brigade", $bb;
    print while <$fh>;




=head2 READ

    $bb->READ($contents)
    $bb->READ($contents, $length)
    $bb->READ($contents, $length, $offset)

Reads data from the brigade $bb into $contents.  When omitted
$length defaults to C<-1>, which reads the first bucket into $contents.
A positive $length will read in $length bytes, or the remainder of the
brigade, whichever is greater. $offset represents the index in $context
to read the new data.




=head2 READLINE

    $bb->READLINE()

Returns the first line of data from the bride. Lines are terminated by
linefeeds (the '\012' character), but we may eventually use C<$/> instead.



=head1 METHODS

APR::Request::Brigade::IO




=head2 read

OO interface to APR::Request::Brigade::READ.




=head2 readline


OO interface to APR::Request::Brigade::READLINE.




=head1 SEE ALSO

L<APR::Request>, L<APR::Table>, L<APR::Brigade>.




=head1 COPYRIGHT

  Copyright 2003-2005  The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
