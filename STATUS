Last modified at [$Date$]   -*-text-*-
/** @page apreq_status STATUS

     2.05 in development.

Contributors looking for a mission:

    - just do an egrep on "TODO" or "XXX" and see what's there


CURRENT RELEASE NOTES:

     - This is the multi-env-unstable branch.  It is a work-in-progress
       which attempts to refactor our C interfaces to provide a more 
       robust module API.  This refactoring effort will propagate 
       into the perl glue as well, once the C API changes settle into 
       place.


     -  joes: We should also remove apreq_jar_t and apreq_request_t.
        I want apreq_env_handle_t to ultimately look something like this:

        typedef struct apreq_env_module_t {
            const char *name;
            apr_uint32_t magic_number;

            apr_status_t (*jar)(apreq_env_handle_t *, const apr_table_t **);
            apr_status_t (*args)(apreq_env_handle_t *, const apr_table_t **);
            apr_status_t (*body)(apreq_env_handle_t *, const apr_table_t **);

            apreq_cookie_t *(*jar_get)(apreq_env_handle_t *, const char *);
            apreq_param_t *(*args_get)(apreq_env_handle_t *, const char *);
            apreq_param_t *(*body_get)(apreq_env_handle_t *, const char *);

            apr_status_t (*parser_get)(apreq_env_handle_t *, apreq_parser_t **);
            apr_status_t (*parser_set)(apreq_env_handle_t *, apreq_parser_t *);
            apr_status_t (*hook_add)(apreq_env_handle_t *, apreq_hook_t *);

            const char *(*header_in)(apreq_env_handle_t *,const char *);
            apr_status_t (*header_out)(apreq_env_handle_t *, const char *,char *);
        } apreq_env_module_t;


        Fates to be determined (ie, things that might need to stay in there somehow):

            void (*log)(const char *,int,int,apr_status_t,apreq_env_handle_t *,
                 const char *,va_list);

            apr_pool_t *(*pool)(apreq_env_handle_t *);
            apr_bucket_alloc_t *(*bucket_alloc)(apreq_env_handle_t *);

            const char *(*temp_dir)(apreq_env_handle_t *, const char *);
            apr_off_t (*max_body)(apreq_env_handle_t *,apr_off_t);
            apr_ssize_t (*max_brigade)(apreq_env_handle_t *, apr_ssize_t);

        If possible the log calls inside libapreq2 should be replaced by 
        error codes that either libapreq2 apps or modules can log (or not).
        The pool and bucket_alloc functions should become simple pointers 
        in apreq_parser_t; env() doesn't need to provide them.

        The rest are controls (temp_dir, max_body, max_brigade) that
        users will need to configure, and libapreq2 parsers will need
        to look at.  However these APIs are missing status codes, for 
        situations where a user tries to apply bogus settings 
        (or which change a setting after the parser has done its work).  
        I'm wondering if that these config shouldn't be moved into the
        apreq_parser_t struct, in which case the new "parser_set" slot 
        will accomplish the same effect.


       Things to definitely remove (being either unneeded, boneheaded, 
       or now obsolete):

            apreq_jar_t (*jar)(apreq_env_handle_t *, apreq_jar_t *);
            apreq_request_t (*request)(apreq_env_handle_t *, apreq_request_t *);

            const char *(*query_string)(apreq_env_handle_t *);
            apr_status_t (*read)(apreq_env_handle_t *,apr_read_type_e,apr_off_t);





RELEASE SHOWSTOPPERS:

     - The api docs and perl glue are currently broken.


CURRENT VOTES:

    - Should we switch to EU::MM for determining the full path to perl?
      The problem is that some folks move their perl binary post-installation,
      but never adjust Config.pm.  EU::MM is smart, by accepting a 
      full path in $^X or by searching the user's $PATH for $^X, before
      resorting to Config.pm.  However, if we change apreq2, we should also
      lobby test-dev to adopt the same solution for Apache::Test.  Otherwise
      our test suite will likely fail, even though the rest of the perl build
      system will presumably still work.

            +1: joes
             0:
            -1:


TODO:

    - We need to add some basic charset support.  Long discussion 
      starts here:
              http://article.gmane.org/gmane.comp.apache.apreq/2371

    - There are too many calls to apreq_env_pool()- lots of these
      can be eliminated by caching the pool in the parser's context.

    - in glue/perl/t/apreq/cgi.t on Win32, printing to the error log
      hangs if the strings involved are about 10000 in size.
      This doesn't occur in the env/cgi tests - why?

    - Why must fprintf(stderr, ...), rather than
      apr_file_printf(err, ...), be used on Win32 in
      cgi_log() of src/apreq_env.c?

    - The current tests don't cover these functions, 
      so add CuTest tests for them:
      -  apreq_merge_values()

    - CuTest needs va_arg to print comments for a failed unit test.

    - Get env/ (Apache::Test) tests to work for --with-apache2-src option.
      Also add a test to configure that prevents simultaneous use of
      --with-apache2-src and --with-apache2-apxs.

    - Bring Perl documentation up to speed: Table.pod, and Error.pod.
      These docs either need to be written, or they require Test::Inline 
      tests to verify their API.

    - Write parser/hook API documentation, and add perl glue for the API.

    - symbol exports files:
      -# aix needs .exp files

    - Install the html dox during "make install".  Should we do this 
      for the doxy manpages also?

    - Rework glue/perl build system to use apreq2-config instead of
      relying on paths like "../../src".

    - Taint checks need to be extended to APR objects, like
      $upload->bb and $upload->info.  We may need be able to
      do that with additional typemaps.


OPEN ISSUES:

    - Should we bundle an apr-based "application/xml" parser?  
      If so, how should we parse the xml data into an apr_table?


BUGS:

    - Fix build automake/libtool/autoconf build system so it works
      properly on OSX & AIX.


WISH LIST:

    - I [joes] wish folks would contribute some glue code for
      one of these:

      - php,
      - Rivet,
      - mod_dtcl, 
      - mod_python, 
      - mod_jk, 
      - tomcat,
      - mod_ruby,
      - mod_parrot.

*/
