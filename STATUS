Last modified at [$Date$]   -*-text-*-
/** @page apreq_status STATUS

     2.05 in development.

Contributors looking for a mission:

    - just do an egrep on "TODO" or "XXX" and see what's there


CURRENT RELEASE NOTES:

     - This is the multi-env-unstable branch.  It is a work-in-progress
       which attempts to refactor our C interfaces to provide a more 
       robust module API.  This refactoring effort will propagate 
       into the perl glue as well, once the C API changes settle into 
       place.


     -  joes: We should also remove apreq_jar_t and apreq_request_t.
        I want apreq_env_handle_t to ultimately look something like this:

        typedef struct apreq_env_module_t {
            const char *name;
            apr_uint32_t magic_number;

            apr_status_t (*jar)(apreq_env_handle_t *, const apr_table_t **);
            apr_status_t (*args)(apreq_env_handle_t *, const apr_table_t **);
            apr_status_t (*body)(apreq_env_handle_t *, const apr_table_t **);

            apreq_cookie_t *(*jar_get)(apreq_env_handle_t *, const char *);
            apreq_param_t *(*args_get)(apreq_env_handle_t *, const char *);
            apreq_param_t *(*body_get)(apreq_env_handle_t *, const char *);

            apr_status_t (*parser_get)(apreq_env_handle_t *, const apreq_parser_t **);
            apr_status_t (*parser_set)(apreq_env_handle_t *, apreq_parser_t *);
            apr_status_t (*hook_add)(apreq_env_handle_t *, apreq_hook_t *);

            apr_status_t (*heap_limit_set)(apreq_env_handle_t *, apr_size_t);
            apr_status_t (*heap_limit_get)(apreq_env_handle_t *, apr_size_t *);

            apr_status_t (*data_limit_set)(apreq_env_handle_t *, apr_off_t);
            apr_status_t (*data_limit_get)(apreq_env_handle_t *, apr_off_t *);

            apr_status_t (*temp_dir_set)(apreq_env_handle_t *, const char *);
            apr_status_t (*temp_dir_get)(apreq_env_handle_t *, const char **);

            const char *(*header_in)(apreq_env_handle_t *,const char *);
            apr_status_t (*header_out)(apreq_env_handle_t *, const char *,char *);
        } apreq_env_module_t;


        Things to definitely remove (being either unneeded, boneheaded, 
        or now obsolete):

            apreq_jar_t (*jar)(apreq_env_handle_t *, apreq_jar_t *);
            apreq_request_t (*request)(apreq_env_handle_t *, apreq_request_t *);

            const char *(*query_string)(apreq_env_handle_t *);
            apr_status_t (*read)(apreq_env_handle_t *,apr_read_type_e,apr_off_t);

            apr_pool_t *(*pool)(apreq_env_handle_t *);
            apr_bucket_alloc_t *(*bucket_alloc)(apreq_env_handle_t *);

            void (*log)(const char *,int,int,apr_status_t,apreq_env_handle_t *,
                 const char *,va_list);

        Logs shouldn't be needed anymore. Folks can use (soon to be improved) 
        hooks for tracing parser activity.  Better error status codes 
        should allow users to diagnose problems through the API itself, 
        not by reading the logfile.



RELEASE SHOWSTOPPERS:

     - The api docs and perl glue are currently broken.


CURRENT VOTES:

    - Should we switch to EU::MM for determining the full path to perl?
      The problem is that some folks move their perl binary post-installation,
      but never adjust Config.pm.  EU::MM is smart, by accepting a 
      full path in $^X or by searching the user's $PATH for $^X, before
      resorting to Config.pm.  However, if we change apreq2, we should also
      lobby test-dev to adopt the same solution for Apache::Test.  Otherwise
      our test suite will likely fail, even though the rest of the perl build
      system will presumably still work.

            +1: joes
             0:
            -1:


TODO:

    - Perl glue, doc sync.

    - Hooks are called on each param now, not just on uploads.
      This allows them to do more stuff (logging, diagnostics, taint checks).

    - Better error handling.

    - We need to add some basic charset support.  Long discussion 
      starts here:
              http://article.gmane.org/gmane.comp.apache.apreq/2371

    - in glue/perl/t/apreq/cgi.t on Win32, printing to the error log
      hangs if the strings involved are about 10000 in size.
      This doesn't occur in the env/cgi tests - why?

    - Why must fprintf(stderr, ...), rather than
      apr_file_printf(err, ...), be used on Win32 in
      cgi_log() of src/apreq_env.c?

    - The current tests don't cover these functions, 
      so add CuTest tests for them:
      -  apreq_merge_values()

    - CuTest needs va_arg to print comments for a failed unit test.

    - Get env/ (Apache::Test) tests to work for --with-apache2-src option.
      Also add a test to configure that prevents simultaneous use of
      --with-apache2-src and --with-apache2-apxs.

    - symbol exports files:
      -# aix needs .exp files

    - Install the html dox during "make install".  Should we do this 
      for the doxy manpages also?

    - Rework glue/perl build system to use apreq2-config instead of
      relying on paths like "../../src".


OPEN ISSUES:

    - Should we bundle an apr-based "application/xml" parser?  
      If so, how should we parse the xml data into an apr_table?


BUGS:

    - Fix build automake/libtool/autoconf build system so it works
      properly on OSX & AIX.


WISH LIST:

    - I [joes] wish folks would contribute some glue code for
      one of these:

      - php,
      - Rivet,
      - mod_dtcl, 
      - mod_python, 
      - mod_jk, 
      - tomcat,
      - mod_ruby,
      - mod_parrot.

*/
